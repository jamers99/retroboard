@page "/{Team}"
@inject IDataAccess DataAccess;

<style>
    .bounds {
        height: 99vh;
        overflow-x: auto;
        overflow-y: hidden;
        position: relative;
        white-space: nowrap;
        padding: 20px;
    }

    .column {
        display: inline-flex;
        flex-wrap: wrap;
        height: 100vh;
        flex-direction: column;
        white-space: normal;
        margin: 0px 50px 0px 0px;
    }

    .column-header {
        margin: 10px 15px 0px 10px;
        font-family: Permanent Marker;
        font-size: 30px
    }

    .card-bounds {
        margin: 10px;
    }
</style>

<div class="bounds">
    @if (Board == null)
    {
        <div>Loading...</div>
    }
    else
    {
        @foreach (var column in Board.Columns)
        {
            <div class="column">
                <div class="column-header">@column.Name</div>
                @foreach (var card in column.Cards)
                {
                    <div class="card-bounds">
                        <RetroBoard.Blazor.Components.CardComponent card="@card" />
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter] public string? Team { get; set; }

    Board? Board { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Team == null)
            throw new ArgumentNullException(nameof(Team));

        Board = await DataAccess.LoadBoardAsync(Team);

        if (Board == null)
            throw new ArgumentException($"Board not loaded");
    }
}
